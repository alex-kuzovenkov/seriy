{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","value","handleChange","bind","handleSubmit","event","this","setState","target","alert","preventDefault","className","onSubmit","onChange","placeholder","type","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAkFeA,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALH,E,yDAQNE,GACXC,KAAKC,SAAS,CAAEN,MAAOI,EAAMG,OAAOP,U,mCAGzBI,GACc,4DAArBC,KAAKN,MAAMC,MACbQ,MAAM,6EAGNA,MAAM,uEAERJ,EAAMK,mB,+BAGN,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,MAAd,sMACA,0BAAMC,SAAUN,KAAKF,cACnB,+BACE,2BAAOO,UAAU,YAAYE,SAAUP,KAAKJ,aAAcY,YAAY,iBAAiBC,KAAK,OAAOC,KAAK,OAAOf,MAAOK,KAAKN,MAAMC,SAEnI,2BAAOU,UAAU,cAAcI,KAAK,SAASd,MAAM,6DAIvD,wBAAIU,UAAU,MAAd,2DAGA,wBAAIA,UAAU,QAAd,4DACA,wBAAIA,UAAU,QAAd,8FACA,wBAAIA,UAAU,QAAd,kIACA,wBAAIA,UAAU,QAAd,sHACA,wBAAIA,UAAU,QAAd,0CACA,wBAAIA,UAAU,QAAd,yFACA,wBAAIA,UAAU,QAAd,8EACA,wBAAIA,UAAU,QAAd,oFACA,wBAAIA,UAAU,QAAd,qEACA,wBAAIA,UAAU,QAAd,mEACA,wBAAIA,UAAU,QAAd,yEACA,wBAAIA,UAAU,QAAd,kGACA,wBAAIA,UAAU,QAAd,4IACA,wBAAIA,UAAU,QAAd,qFACA,wBAAIA,UAAU,QAAd,uIACA,wBAAIA,UAAU,QAAd,4GACA,wBAAIA,UAAU,QAAd,wGACA,wBAAIA,UAAU,QAAd,8EACA,wBAAIA,UAAU,QAAd,2HACA,wBAAIA,UAAU,QAAd,+CACA,wBAAIA,UAAU,QAAd,kJACA,wBAAIA,UAAU,QAAd,4GACA,wBAAIA,UAAU,QAAd,+FACA,wBAAIA,UAAU,QAAd,mFACA,wBAAIA,UAAU,QAAd,uEACA,wBAAIA,UAAU,QAAd,0DACA,wBAAIA,UAAU,QAAd,wCACA,wBAAIA,UAAU,QAAd,gEACA,wBAAIA,UAAU,QAAd,oFACA,wBAAIA,UAAU,QAAd,qFACA,wBAAIA,UAAU,QAAd,oFACA,wBAAIA,UAAU,QAAd,6EACA,wBAAIA,UAAU,QAAd,2IACA,wBAAIA,UAAU,QAAd,4BACA,wBAAIA,UAAU,QAAd,2FACA,wBAAIA,UAAU,QAAd,qB,GAzEUM,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.088f585e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleSubmit(event) {\n    if (this.state.value === \"Введи меня\") {\n      alert('Почтовый ящик')\n    }\n    else {\n      alert('Попробуй еще')\n    }\n    event.preventDefault();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"main\">\n          <h1 className=\"h1\">Какой-то из паролей подойдет, отвечаю))</h1>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              <input className=\"textInput\" onChange={this.handleChange} placeholder=\"Enter password\" type=\"text\" name=\"name\" value={this.state.value} />\n            </label>\n            <input className=\"submitInput\" type=\"submit\" value=\"Отправить\" />\n          </form>\n        </div>\n\n        <h6 className=\"h3\">Введи меня</h6>\n\n\n        <h1 className=\"w1 a\">Cерый Дрыщь</h1>\n        <h1 className=\"w1 b\">Я знаю он не такой))</h1>\n        <h1 className=\"w1 c\">Не здавайся, я в тебя верю</h1>\n        <h3 className=\"w3 a\">Не ври, у него не выйдет</h3>\n        <h3 className=\"w3 b\">Ха-ха-ха</h3>\n        <h3 className=\"w3 c\">Может последний</h3>\n        <h2 className=\"w2 a\">А может первый</h2>\n        <h2 className=\"w2 b\">А может никакой</h2>\n        <h2 className=\"w2 c\">Он сдасться))))</h2>\n        <h1 className=\"v1 a\">Серый - белый</h1>\n        <h1 className=\"v1 b\">Дай автограф))</h1>\n        <h1 className=\"v1 c\">Серый я в тебя верю</h1>\n        <h3 className=\"v3 a\">Только серый, только серый</h3>\n        <h3 className=\"v3 b\">Ну ты и романтик</h3>\n        <h3 className=\"v3 c\">Я от тебя такого не ожидал</h3>\n        <h2 className=\"v2 a\">Ты просто красавчик</h2>\n        <h2 className=\"v2 b\">Кто-ты на самом деле</h2>\n        <h2 className=\"v2 c\">Да ты супермен</h2>\n        <h1 className=\"p1 a\">Я к вам по отчеству буду</h1>\n        <h1 className=\"p1 b\">Дай лапу</h1>\n        <h1 className=\"p1 c\">Пам-пам-пам Серьожа молодец</h1>\n        <h3 className=\"p3 a\">Просто будущий отец</h3>\n        <h3 className=\"p3 b\">Настоящий мущина</h3>\n        <h3 className=\"p3 c\">Серыйй патриот</h3>\n        <h2 className=\"p2 a\">Просто певец</h2>\n        <h2 className=\"p2 b\">Миллионер</h2>\n        <h2 className=\"p2 c\">Любовь</h2>\n        <h1 className=\"o1 a\">Спайдермен</h1>\n        <h1 className=\"o1 b\">Ты такой добрый</h1>\n        <h1 className=\"o1 c\">Что там за ушком</h1>\n        <h3 className=\"o3 a\">Серый ты пример</h3>\n        <h3 className=\"o3 b\">Смейся-смейся</h3>\n        <h3 className=\"o3 c\">Это твоя последняя победа</h3>\n        <h2 className=\"o2 a\">Амур</h2>\n        <h2 className=\"o2 b\">Да ты альфа-самец</h2>\n        <h2 className=\"o2 c\">Ты</h2>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}